// linked list implementaion 
// example on student list


#include<stdio.h>
#include<conio.h>
#include<alloc.h>
#include<ctype.h>

struct student {
int id;
char name[20];

} ; //struct student


struct node{

struct student stu ;
struct node *pPrev;
struct node *pNext;
};   // struct node

struct node *pHead;
struct node *pTail;

// global variabels

// functions prototype


void print_student(struct student s);
struct student fill_student(void);


// functions prototype for linked list

struct node *createNode(struct student s);

int addNode(void  );

int insertNode( int location);

struct student  searchByIdNode(int id );
struct student  searchByNameNode(char name[] );

int deleteNode(int loc);

void printList(void);

void freeList(void);

// end of prototype



int main(){

int input_val , loc , input_id , flag=1 , retval;

char input_name[20];
struct student s ;
clrscr();

printf("1-Add \n 2-Insert\n 3-Search by ID \n 4-Search by name\n 5-Delete student \n 6-delete list \n 7-print students \n 8-Exit\n");

while(flag){
     scanf("%d" , &input_val);
     switch(input_val){
	   case 1:
		retval=addNode();
		if(retval){
		   printf("student Added successfully....\n");
		}
		else {
		   printf("can not add student\n");

		}

		break;


	   case 2:
		printf("please enter location\n");
		scanf("%d" , &loc);
		retval=insertNode(loc);

		if(retval){
		   printf("student Added successfully....\n");
		}
		else {
		   printf("can not add student\n");

		}

		break;

	   case 3:
		printf("please enter ID \n");
		scanf("%d" , &input_id);
		s=  searchByIdNode(input_id);

		if(s.id==-1){
		  printf("student not found\n");
		}
		else{
		   printf("student found");
		}
		break ;

	   case 4:
	       printf("please enter name");
	       scanf("%s" , input_name);
	       s = searchByNameNode (input_name);

	       if(strcmp(s.name,"")==0){
		   printf("student not found\n");
		}
		else{
		   printf("student found\n");
		}
		break ;


	  case 5:
	       printf("please enter location\n");
	       scanf("%d" , &loc);
	       retval=deleteNode(loc);


	       if(retval){
		   printf("student deleted successfully....\n");
	       }
	       else {
		   printf("can not delete student\n");

	       }

		break;


	 case 6:
	      freeList();
	      break;

	 case 7:
	      printList();
	      break;

	 case 8:
	     flag=0;
	     break;

     }
}





getch();

return 0;


}

struct student fill_student(void){
int i;
struct student s;
printf("enter student ID\n");
scanf("%d" , &(s.id));
printf("enter student name: \n");
scanf("%s", s.name);


return s;


}

void print_student(struct student s){
int i;
printf("the id of student: %d\n" , s.id );
printf("the name of student %s\n", s.name);

}



// create node implementation

struct node *createNode(struct student s){

struct node *ptr;
ptr=(struct node*)malloc(sizeof(struct node));

if(ptr)
{
  ptr ->stu=s;
  ptr->pNext=NULL;
  ptr->pPrev=NULL;
}

return ptr ;


}

// add node implementation

int addNode( ){
struct student s;

int return_val=0;
struct node *ptr;
ptr =  createNode(s);
s=fill_student();


if(ptr)
{
   return_val=1;
   if(pHead==NULL) //no list
   {
      pHead=ptr;
   }
   else // there is a list
   {
     pTail -> pNext = ptr;
     ptr ->pPrev = pTail;
     pTail=ptr;

   }
}


     return return_val ;
}






// insert node implementation


int insertNode( int location){

 int return_val=0 , i;
 struct node *ptr , *temp;

 if(ptr)

 {
   return_val=1;
   if(pHead==NULL)  //no list
   {
    pHead=pTail=ptr;

    }




    else
    {
      if(location==0) // insert node in first
      {

	  ptr->pNext=pHead; // first step
	  pHead->pPrev=ptr; // second step
	  pHead= ptr; //third step
      }

      else // insert in midle or last
      {
	temp=pHead;

	for(i=0 ; i<location-1 && (temp->pNext) ; i++)
	{
	   temp=temp-> pNext;

	}

	if(temp==NULL || temp==pTail)  // last node
	{
	   pTail -> pNext=ptr;
	   ptr -> pPrev=pTail;
	   pTail=ptr;

	}

	else // middle
	{

	 (temp ->pNext ) ->pPrev= ptr;
	 ptr ->pNext=temp ->pNext;
	 ptr->pPrev=temp;
	 temp -> pNext=ptr;
	 } // end of else 1


      } //end of else 2

    } //end of else 3

  } // end of if ptr

 return return_val;


}

// search by ID function impelenentation
struct student  searchByIdNode(int id ){

struct node *pTemp;
struct student s;
pTemp=pHead;

while(pTemp && pTemp ->stu.id!=s.id)
{
  pTemp=pTemp -> pNext;
}

if(pTemp){
  s=pTemp->stu;
}
else{
  s.id=-1;
}

return s;
}

// search by name function impelentation
struct student  searchByNameNode(char name[] ){

struct node *temp;
struct student s;
temp = pHead;

while((temp) &&(strcmp(temp->stu.name , name)!=0)){
     temp=temp-> pNext;
}
if(temp){
  s=temp->stu;
}
else{
   strcpy(s.name, "");
}
return s;

}










// implementation of delete node

int deleteNode(int loc){


int return_val=0 , i;

struct node  *temp;
if(loc==0){
  return_val=1;
  if(pHead->pNext==NULL){
     pHead=pTail=NULL;
  }
  else{
     pHead=pHead->pNext;
     pHead->pPrev=NULL;
  }
  free(temp);
}// end of first if

else {
    temp=pHead;
    for(i=0 ; (i<loc) && temp ;i++){
       temp=temp->pNext;
    }
    if(temp){
      return_val=1;
      if(temp==pTail){
	pTail=pTail->pPrev;
	pTail->pNext=NULL;
      }
      else{
	 (temp->pPrev)->pNext=temp->pNext;
	  (temp->pNext)->pPrev=temp->pPrev;
      }
      free(temp);
    }
}
return return_val;

}


//free list implementation
void freeList(void){
struct node *temp ;
while(pHead){
     temp=pHead;
     pHead=pHead->pNext;
     free(temp);
}
pTail=NULL;
}

//print list implementation

void printList(){
struct node * temp;
temp=pHead;
while(temp){
    print_student (temp->stu);
    temp=temp->pNext;
}


}




